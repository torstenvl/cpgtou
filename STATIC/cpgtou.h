/*---------------------------------------------------------------------------*\
|                                                                             |
|  CPGTOU –– Code Page to Unicode                                             |
|                                                                             |
|  BITSC (Modified ISC) License Notice                                        |
|  Copyright (c) 2022 Joshua Lee Ockert <torstenvl@gmail.com>                 |
|                                                                             |
|  THIS WORK IS PROVIDED "AS IS" WITH NO EXPRESS OR IMPLIED WARRANTIES. THERE |
|  IS EXPRESSLY NO WARRANTY OF MERCHANTABILITY, FITNESS, NON-INFRINGEMENT, OR |
|  TITLE. NO AUTHOR SHALL BE LIABLE, UNDER ANY THEORY OF LAW, FOR ANY DAMAGES |
|  OF ANY CHARACTER WHATSOEVER RELATING TO THE USE OF THIS WORK.              |
|                                                                             |
|  Permission to use, copy, modify, and/or distribute this work for any       |
|  purpose is hereby granted, provided this notice appears in all copies.     |
|                                                                             |
\*---------------------------------------------------------------------------*/


/*---------------------------------------------------------------------------*\
|                                                                             |
|                       CPGTOU –– Code Page to Unicode                        |
|                                                                             |
|        int32_t cpgtou(unsigned char cpt, cpg_t cpg, int32_t *extra)         |
|                                                                             |
|   USAGE:                                                                    |
|                                                                             |
|   The function returns the Unicode code point corresponding most closely    |
|   to the code point cpt in code page cpg.  However, not all code page       |
|   code points correspond to Unicode code points on a 1:1 basis.  The        |
|   extra parameter allows multiple-return when cpt maps to two Unicode       |
|   code points, and allows for carrying over information from one use of     |
|   the function to the next when necessary (e.g., for double-byte            |
|   sequences).                                                               |
|                                                                             |
|   RETURN VALUE:                                                             |
|                                                                             |
|     - On successful conversion, the function returns the Unicode code       |
|       point that corresponds (as close as possible) to the specified        |
|       code point in the specified code page.  If two Unicode code points    |
|       are required to encode the result, the second Unicode code point      |
|       will be in the variable pointed-to by the extra parameter.            |
|                                                                             |
|     - If the specified code point does not exist in the given code page,    |
|       the function returns cpNONE (defined as -1).                          |
|                                                                             |
|     - If the specified code page is not yet supported, the function         |
|       will return cpUNSUPPORTED (defined as -2).                            |
|                                                                             |
|     - If the specified code point is the first half of a double-byte        |
|       sequence in the given code page (e.g., in JIS-based code pages),      |
|       then the function will return cpCALLAGAIN (defined as -3) with the    |
|       first code point stored in the variable pointed-to by the extra       |
|       parameter.  This allows sequential processing of first and second     |
|       bytes without convoluted special-case processing.                     |
|                                                                             |
|     - If the specified code point is the second half of a double-byte       |
|       sequence in the given code page (e.g., in JIS-based code pages),      |
|       then the function will look to the extra parameter for the first      |
|       half, and look up the appropriate Unicode code point for that         |
|       double-byte sequence.  If necessary, the variable pointed-to by       |
|       the extra parameter will be filled with a second Unicode code         |
|       point, just as when converting a single code point to Unicode.        |
|                                                                             |
|       The function applies the following rules:                             |
|                                                                             |
|       -- If the code page allows for double-byte sequences and the extra    |
|          parameter DOES NOT point to a valid first-byte value, then cpt     |
|          will be treated normally (i.e., as a single-byte character or      |
|          the first half of a double-byte character).  If cpt is not a       |
|          valid single-byte or first-byte value, then cpNONE (defined as     |
|          -1) will be returned.                                              | 
|                                                                             |
|       -- If the code page allows for double-byte sequences and the extra    |
|          parameter DOES point to a valid first-byte value, the function     |
|          will treat cpt as a second-byte value.  However, if cpt is not     |
|          a valid second-byte value, then the extra parameter will be        |
|          discarded and cpt will be treated normally (i.e., as a single-     |
|          byte character or the first half of a double-byte character).      |
|          If cpt is not a valid single-byte or first-byte value, then        |
|          cpSQNCERROR (defined as -4) will be returned.                      |  
|                                                                             |
\*===========================================================================*/


#ifndef CPGTOU_H__
#define CPGTOU_H__


#include <inttypes.h>


#define cpNONE          -1
#define cpUNSUPPORTED   -2
#define cpCALLAGAIN     -3
#define cpSQNCERROR     -4


typedef enum cpg_t {
    CPG_437,      // United States IBM
    CPG_708,      // Arabic (ASMO 708)
    CPG_709,      // →→→→→ Arabic (ASMO 449+, BCON V4) 
    CPG_710,      // →→→→→ Arabic (transparent Arabic)
    CPG_711,      // →→→→→ Arabic (Nafitha Enhanced)
    CPG_720,      // Arabic (transparent ASMO)
    CPG_819,      // Windows 3.1 (United States and Western Europe)
    CPG_850,      // IBM multilingual
    CPG_852,      // Eastern European
    CPG_860,      // Portuguese
    CPG_862,      // Hebrew
    CPG_863,      // French Canadian
    CPG_864,      // Arabic
    CPG_865,      // Norwegian
    CPG_866,      // Soviet Union
    CPG_874,      // Thai
    CPG_932,      // →→→→→ Japanese
    CPG_936,      // →→→→→ Simplified Chinese
    CPG_949,      // →→→→→ Korean
    CPG_950,      // →→→→→ Traditional Chinese
    CPG_1250,     // Eastern European
    CPG_1251,     // Cyrillic
    CPG_1252,     // Western European
    CPG_1253,     // Greek
    CPG_1254,     // Turkish
    CPG_1255,     // Hebrew
    CPG_1256,     // Arabic
    CPG_1257,     // Baltic
    CPG_1258,     // Vietnamese
    CPG_1361,     // →→→→→ Korean (Johab)
    CPG_10000,    // Mac Roman
    CPG_10001,    // →→→→→ Mac Japan
    CPG_10004,    // Mac Arabic
    CPG_10005,    // Mac Hebrew
    CPG_10006,    // Mac Greek
    CPG_10007,    // Mac Cyrillic
    CPG_10029,    // Mac Latin2
    CPG_10081,    // Mac Turkish
    CPG_57002,    // →→→→→ Devanagari (Hindi, Sanskrit, Marathi, Nepalese)
    CPG_57003,    // →→→→→ Bengali
    CPG_57004,    // →→→→→ Tamil
    CPG_57005,    // →→→→→ Telugu
    CPG_57006,    // →→→→→ Assamese
    CPG_57007,    // →→→→→ Oriya
    CPG_57008,    // →→→→→ Kannada
    CPG_57009,    // →→→→→ Malayalam
    CPG_57010,    // →→→→→ Gujarati
    CPG_57011,    // →→→→→ Punjabi
    ANSI,         // → Same as CPG_1252 Western European
    MAC,          // → Same as CPG_10000 Mac Roman
    PC,           // → Same as CPG_437 United States IBM
    PCA,          // → Same as CPG_850 IBM multilingual
    MACROMAN      // → Same as CPG_10000 Mac Roman
} cpg_t;


/*–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––\
|                                                                            |
|                            Implementation Notes                            |
|                                                                            |
| Ostensibly, code pages don't matter for the first 128 code points.         |
| "For both Windows code pages and OEM code pages, the code values 0x00      |
| through 0x7F correspond to the 7-bit ASCII character set."  See            |
| https://docs.microsoft.com/en-us/windows/win32/intl/code-pages             |
|                                                                            |
| Reality is slightly more complicated.  For example, Shift JIS-derived code |
| pages use the yen symbol in place of the backslash, and the over-line in   |
| place of the tilde, within the standard 7-bit ASCII character set range.   |
| However, that behavior is mostly implemented by fonts.  In Windows, for    |
| example, converting 0x5C to Unicode via MultiByteToWideChar results in     |
| U+005C and is fully reversible; it's just that 0x5C and U+005C both render |
| as the Yen sign (¥) if the default system locale is set to Japanese.  By   |
| contrast, libiconv will convert 0x5C in ShiftJIS to the Yen sign in the    |
| appropriate code page (e.g., 0xA5 in ISO 8859-15).                         |
|                                                                            |
| We will have to decide whether we want to do better at supporting round-   |
| trip conversions or do better at making our results usable easily after    |
| the first set of conversions.  (This holds true for non-double-byte code   |
| pages as well, e.g., Mac Hebrew contains some features to enable round-    |
| trip fidelity but that hurt readability.)                                  |
|                                                                            |
\–––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––*/


__attribute__((unused)) static int32_t cpgtou(unsigned char cpt, cpg_t cpg, int32_t *extra) {
    __attribute__((unused)) static const char license[]="\
CPGTOU -- Code Page to Unicode                                              \n\
Copyright (c) 2022 Joshua Lee Ockert                                        \n\
                                                                            \n\
THIS WORK IS PROVIDED \"AS IS\" WITH NO EXPRESS OR IMPLIED WARRANTIES. THERE\n\
IS EXPRESSLY NO WARRANTY OF MERCHANTABILITY, FITNESS, NON-INFRINGEMENT, OR  \n\
TITLE. NO AUTHOR SHALL BE LIABLE, UNDER ANY THEORY OF LAW, FOR ANY DAMAGES  \n\
OF ANY CHARACTER WHATSOEVER RELATING TO THE USE OF THIS WORK.               \n\
                                                                            \n\
Permission to use, copy, modify, and/or distribute this work for any        \n\
purpose is hereby granted, provided this notice appears in all copies.     \n";

    static const int32_t CPG_437_TBL[128] = {
        0x00C7,  0x00FC,  0x00E9,  0x00E2,  0x00E4,  0x00E0,  0x00E5,  0x00E7,
        0x00EA,  0x00EB,  0x00E8,  0x00EF,  0x00EE,  0x00EC,  0x00C4,  0x00C5,
        0x00C9,  0x00E6,  0x00C6,  0x00F4,  0x00F6,  0x00F2,  0x00FB,  0x00F9,
        0x00FF,  0x00D6,  0x00DC,  0x00A2,  0x00A3,  0x00A5,  0x20A7,  0x0192,
        0x00E1,  0x00ED,  0x00F3,  0x00FA,  0x00F1,  0x00D1,  0x00AA,  0x00BA,
        0x00BF,  0x2310,  0x00AC,  0x00BD,  0x00BC,  0x00A1,  0x00AB,  0x00BB,
        0x2591,  0x2592,  0x2593,  0x2502,  0x2524,  0x2561,  0x2562,  0x2556,
        0x2555,  0x2563,  0x2551,  0x2557,  0x255D,  0x255C,  0x255B,  0x2510,
        0x2514,  0x2534,  0x252C,  0x251C,  0x2500,  0x253C,  0x255E,  0x255F,
        0x255A,  0x2554,  0x2569,  0x2566,  0x2560,  0x2550,  0x256C,  0x2567,
        0x2568,  0x2564,  0x2565,  0x2559,  0x2558,  0x2552,  0x2553,  0x256B,
        0x256A,  0x2518,  0x250C,  0x2588,  0x2584,  0x258C,  0x2590,  0x2580,
        0x03B1,  0x00DF,  0x0393,  0x03C0,  0x03A3,  0x03C3,  0x00B5,  0x03C4,
        0x03A6,  0x0398,  0x03A9,  0x03B4,  0x221E,  0x03C6,  0x03B5,  0x2229,
        0x2261,  0x00B1,  0x2265,  0x2264,  0x2320,  0x2321,  0x00F7,  0x2248,
        0x00B0,  0x2219,  0x00B7,  0x221A,  0x207F,  0x00B2,  0x25A0,  0x00A0 
    };  
    static const int32_t CPG_708_TBL[128] = {
        0x2502,  0x2524,  0x00E9,  0x00E2,  0x2561,  0x00E0,  0x2562,  0x00E7,
        0x00EA,  0x00EB,  0x00E8,  0x00EF,  0x00EE,  0x2556,  0x2555,  0x2563,
        0x2551,  0x2557,  0x255D,  0x00F4,  0x255C,  0x255B,  0x00FB,  0x00F9,
        0x2510,  0x2514,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  cpNONE,
        cpNONE,  0x2534,  0x252C,  0x251C,     164,  0x2500,  0x253C,  0x255E,
        0x255F,  0x255A,  0x2554,  0x2569,  0x060C,  0x2566,  0x00AB,  0x00BB,
        0x2591,  0x2592,  0x2593,  0x2560,  0x2550,  0x256C,  0x2567,  0x2568,
        0x2564,  0x2565,  0x2559,  0x061B,  0x2558,  0x2552,  0x2553,  0x061F,
        cpNONE,  0x0621,  0x0622,  0x0623,  0x0624,  0x0625,  0x0626,  0x0627,
        0x0628,  0x0629,  0x062A,  0x062B,  0x062C,  0x062D,  0x062E,  0x062F,
        0x0630,  0x0631,  0x0632,  0x0633,  0x0634,  0x0635,  0x0636,  0x0637,
        0x0638,  0x0639,  0x063A,  0x2588,  0x2584,  0x258C,  0x2590,  0x2580,
        0x0640,  0x0641,  0x0642,  0x0643,  0x0644,  0x0645,  0x0646,  0x0647,
        0x0648,  0x0649,  0x064A,  0x064B,  0x064C,  0x064D,  0x064E,  0x064F,
        0x0650,  0x0651,  0x0652,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  cpNONE,
        cpNONE,  0x256A,  0x2518,  0x250C,  0x00B5,  0x00A3,  0x25A0,  0x00A0 
    };
    static const int32_t CPG_720_TBL[128] = {
        cpNONE,  cpNONE,  0x00E9,  0x00E2,  cpNONE,  0x00E0,  cpNONE,  0x00E7,
        0x00EA,  0x00EB,  0x00E8,  0x00EF,  0x00EE,  cpNONE,  cpNONE,  cpNONE,
        cpNONE,  0x0651,  0x0652,  0x00F4,  0x00A4,  0x0640,  0x00FB,  0x00F9,
        0x0621,  0x0622,  0x0623,  0x0624,  0x00A3,  0x0625,  0x0626,  0x0627,
        0x0628,  0x0629,  0x062A,  0x062B,  0x062C,  0x062D,  0x062E,  0x062F,
        0x0630,  0x0631,  0x0632,  0x0633,  0x0634,  0x0635,  0x00AB,  0x00BB,
        0x2591,  0x2592,  0x2593,  0x2502,  0x2524,  0x2561,  0x2562,  0x2556,
        0x2555,  0x2563,  0x2551,  0x2557,  0x255D,  0x255C,  0x255B,  0x2510,
        0x2514,  0x2534,  0x252C,  0x251C,  0x2500,  0x253C,  0x255E,  0x255F,
        0x255A,  0x2554,  0x2569,  0x2566,  0x2560,  0x2550,  0x256C,  0x2567,
        0x2568,  0x2564,  0x2565,  0x2559,  0x2558,  0x2552,  0x2553,  0x256B,
        0x256A,  0x2518,  0x250C,  0x2588,  0x2584,  0x258C,  0x2590,  0x2580,
        0x0636,  0x0637,  0x0638,  0x0639,  0x063A,  0x0641,  0x00B5,  0x0642,
        0x0643,  0x0644,  0x0645,  0x0646,  0x0647,  0x0648,  0x0649,  0x064A,
        0x2261,  0x064B,  0x064C,  0x064D,  0x064E,  0x064F,  0x0650,  0x2248,
        0x00B0,  0x2219,  0x00B7,  0x221A,  0x207F,  0x00B2,  0x25A0,  0x00A0 
    };
    static const int32_t CPG_819_TBL[128] = {
        cpNONE,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  
        cpNONE,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  
        cpNONE,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  
        cpNONE,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  
           160,     161,     162,     163,     164,     165,     166,     167,  
           168,     169,     170,     171,     172,     173,     174,     175,  
           176,     177,     178,     179,     180,     181,     182,     183,  
           184,     185,     186,     187,     188,     189,     190,     191,  
           192,     193,     194,     195,     196,     197,     198,     199,  
           200,     201,     202,     203,     204,     205,     206,     207,  
           208,     209,     210,     211,     212,     213,     214,     215,  
           216,     217,     218,     219,     220,     221,     222,     223,  
           224,     225,     226,     227,     228,     229,     230,     231,  
           232,     233,     234,     235,     236,     237,     238,     239,  
           240,     241,     242,     243,     244,     245,     246,     247,  
           248,     249,     250,     251,     252,     253,     254,     255 
    };  
    static const int32_t CPG_850_TBL[128] = {
        0x00C7,  0x00FC,  0x00E9,  0x00E2,  0x00E4,  0x00E0,  0x00E5,  0x00E7,
        0x00EA,  0x00EB,  0x00E8,  0x00EF,  0x00EE,  0x00EC,  0x00C4,  0x00C5,
        0x00C9,  0x00E6,  0x00C6,  0x00F4,  0x00F6,  0x00F2,  0x00FB,  0x00F9,
        0x00FF,  0x00D6,  0x00DC,  0x00F8,  0x00A3,  0x00D8,  0x00D7,  0x0192,
        0x00E1,  0x00ED,  0x00F3,  0x00FA,  0x00F1,  0x00D1,  0x00AA,  0x00BA,
        0x00BF,  0x00AE,  0x00AC,  0x00BD,  0x00BC,  0x00A1,  0x00AB,  0x00BB,
        0x2591,  0x2592,  0x2593,  0x2502,  0x2524,  0x00C1,  0x00C2,  0x00C0,
        0x00A9,  0x2563,  0x2551,  0x2557,  0x255D,  0x00A2,  0x00A5,  0x2510,
        0x2514,  0x2534,  0x252C,  0x251C,  0x2500,  0x253C,  0x00E3,  0x00C3,
        0x255A,  0x2554,  0x2569,  0x2566,  0x2560,  0x2550,  0x256C,  0x00A4,
        0x00F0,  0x00D0,  0x00CA,  0x00CB,  0x00C8,  0x0131,  0x00CD,  0x00CE,
        0x00CF,  0x2518,  0x250C,  0x2588,  0x2584,  0x00A6,  0x00CC,  0x2580,
        0x00D3,  0x00DF,  0x00D4,  0x00D2,  0x00F5,  0x00D5,  0x00B5,  0x00FE,
        0x00DE,  0x00DA,  0x00DB,  0x00D9,  0x00FD,  0x00DD,  0x00AF,  0x00B4,
        0x00AD,  0x00B1,  0x2017,  0x00BE,  0x00B6,  0x00A7,  0x00F7,  0x00B8,
        0x00B0,  0x00A8,  0x00B7,  0x00B9,  0x00B3,  0x00B2,  0x25A0,  0x00A0 
    };
    static const int32_t CPG_852_TBL[128] = {
        0x00C7,  0x00FC,  0x00E9,  0x00E2,  0x00E4,  0x016F,  0x0107,  0x00E7,
        0x0142,  0x00EB,  0x0150,  0x0151,  0x00EE,  0x0179,  0x00C4,  0x0106,
        0x00C9,  0x0139,  0x013A,  0x00F4,  0x00F6,  0x013D,  0x013E,  0x015A,
        0x015B,  0x00D6,  0x00DC,  0x0164,  0x0165,  0x0141,  0x00D7,  0x010D,
        0x00E1,  0x00ED,  0x00F3,  0x00FA,  0x0104,  0x0105,  0x017D,  0x017E,
        0x0118,  0x0119,  0x00AC,  0x017A,  0x010C,  0x015F,  0x00AB,  0x00BB,
        0x2591,  0x2592,  0x2593,  0x2502,  0x2524,  0x00C1,  0x00C2,  0x011A,
        0x015E,  0x2563,  0x2551,  0x2557,  0x255D,  0x017B,  0x017C,  0x2510,
        0x2514,  0x2534,  0x252C,  0x251C,  0x2500,  0x253C,  0x0102,  0x0103,
        0x255A,  0x2554,  0x2569,  0x2566,  0x2560,  0x2550,  0x256C,  0x00A4,
        0x0111,  0x00D0,  0x010E,  0x00CB,  0x010F,  0x0147,  0x00CD,  0x00CE,
        0x011B,  0x2518,  0x250C,  0x2588,  0x2584,  0x0162,  0x016E,  0x2580,
        0x00D3,  0x00DF,  0x00D4,  0x0143,  0x0144,  0x0148,  0x0160,  0x0161,
        0x0154,  0x00DA,  0x0155,  0x0170,  0x00FD,  0x00DD,  0x0163,  0x00B4,
        0x00AD,  0x02DD,  0x02DB,  0x02C7,  0x02D8,  0x00A7,  0x00F7,  0x00B8,
        0x00B0,  0x00A8,  0x02D9,  0x0171,  0x0158,  0x0159,  0x25A0,  0x00A0 
    };
    static const int32_t CPG_860_TBL[128] = {
        0x00C7,  0x00FC,  0x00E9,  0x00E2,  0x00E3,  0x00E0,  0x00C1,  0x00E7,
        0x00EA,  0x00CA,  0x00E8,  0x00CD,  0x00D4,  0x00EC,  0x00C3,  0x00C2,
        0x00C9,  0x00C0,  0x00C8,  0x00F4,  0x00F5,  0x00F2,  0x00DA,  0x00F9,
        0x00CC,  0x00D5,  0x00DC,  0x00A2,  0x00A3,  0x00D9,  0x20A7,  0x00D3,
        0x00E1,  0x00ED,  0x00F3,  0x00FA,  0x00F1,  0x00D1,  0x00AA,  0x00BA,
        0x00BF,  0x00D2,  0x00AC,  0x00BD,  0x00BC,  0x00A1,  0x00AB,  0x00BB,
        0x2591,  0x2592,  0x2593,  0x2502,  0x2524,  0x2561,  0x2562,  0x2556,
        0x2555,  0x2563,  0x2551,  0x2557,  0x255D,  0x255C,  0x255B,  0x2510,
        0x2514,  0x2534,  0x252C,  0x251C,  0x2500,  0x253C,  0x255E,  0x255F,
        0x255A,  0x2554,  0x2569,  0x2566,  0x2560,  0x2550,  0x256C,  0x2567,
        0x2568,  0x2564,  0x2565,  0x2559,  0x2558,  0x2552,  0x2553,  0x256B,
        0x256A,  0x2518,  0x250C,  0x2588,  0x2584,  0x258C,  0x2590,  0x2580,
        0x03B1,  0x00DF,  0x0393,  0x03C0,  0x03A3,  0x03C3,  0x00B5,  0x03C4,
        0x03A6,  0x0398,  0x03A9,  0x03B4,  0x221E,  0x03C6,  0x03B5,  0x2229,
        0x2261,  0x00B1,  0x2265,  0x2264,  0x2320,  0x2321,  0x00F7,  0x2248,
        0x00B0,  0x2219,  0x00B7,  0x221A,  0x207F,  0x00B2,  0x25A0,  0x00A0 
    };
    static const int32_t CPG_862_TBL[128] = {
        0x05D0,  0x05D1,  0x05D2,  0x05D3,  0x05D4,  0x05D5,  0x05D6,  0x05D7,
        0x05D8,  0x05D9,  0x05DA,  0x05DB,  0x05DC,  0x05DD,  0x05DE,  0x05DF,
        0x05E0,  0x05E1,  0x05E2,  0x05E3,  0x05E4,  0x05E5,  0x05E6,  0x05E7,
        0x05E8,  0x05E9,  0x05EA,  0x00A2,  0x00A3,  0x00A5,  0x20A7,  0x0192,
        0x00E1,  0x00ED,  0x00F3,  0x00FA,  0x00F1,  0x00D1,  0x00AA,  0x00BA,
        0x00BF,  0x2310,  0x00AC,  0x00BD,  0x00BC,  0x00A1,  0x00AB,  0x00BB,
        0x2591,  0x2592,  0x2593,  0x2502,  0x2524,  0x2561,  0x2562,  0x2556,
        0x2555,  0x2563,  0x2551,  0x2557,  0x255D,  0x255C,  0x255B,  0x2510,
        0x2514,  0x2534,  0x252C,  0x251C,  0x2500,  0x253C,  0x255E,  0x255F,
        0x255A,  0x2554,  0x2569,  0x2566,  0x2560,  0x2550,  0x256C,  0x2567,
        0x2568,  0x2564,  0x2565,  0x2559,  0x2558,  0x2552,  0x2553,  0x256B,
        0x256A,  0x2518,  0x250C,  0x2588,  0x2584,  0x258C,  0x2590,  0x2580,
        0x03B1,  0x00DF,  0x0393,  0x03C0,  0x03A3,  0x03C3,  0x00B5,  0x03C4,
        0x03A6,  0x0398,  0x03A9,  0x03B4,  0x221E,  0x03C6,  0x03B5,  0x2229,
        0x2261,  0x00B1,  0x2265,  0x2264,  0x2320,  0x2321,  0x00F7,  0x2248,
        0x00B0,  0x2219,  0x00B7,  0x221A,  0x207F,  0x00B2,  0x25A0,  0x00A0 
    };
    static const int32_t CPG_863_TBL[128] = {
        0x00C7,  0x00FC,  0x00E9,  0x00E2,  0x00C2,  0x00E0,  0x00B6,  0x00E7,
        0x00EA,  0x00EB,  0x00E8,  0x00EF,  0x00EE,  0x2017,  0x00C0,  0x00A7,
        0x00C9,  0x00C8,  0x00CA,  0x00F4,  0x00CB,  0x00CF,  0x00FB,  0x00F9,
        0x00A4,  0x00D4,  0x00DC,  0x00A2,  0x00A3,  0x00D9,  0x00DB,  0x0192,
        0x00A6,  0x00B4,  0x00F3,  0x00FA,  0x00A8,  0x00B8,  0x00B3,  0x00AF,
        0x00CE,  0x2310,  0x00AC,  0x00BD,  0x00BC,  0x00BE,  0x00AB,  0x00BB,
        0x2591,  0x2592,  0x2593,  0x2502,  0x2524,  0x2561,  0x2562,  0x2556,
        0x2555,  0x2563,  0x2551,  0x2557,  0x255D,  0x255C,  0x255B,  0x2510,
        0x2514,  0x2534,  0x252C,  0x251C,  0x2500,  0x253C,  0x255E,  0x255F,
        0x255A,  0x2554,  0x2569,  0x2566,  0x2560,  0x2550,  0x256C,  0x2567,
        0x2568,  0x2564,  0x2565,  0x2559,  0x2558,  0x2552,  0x2553,  0x256B,
        0x256A,  0x2518,  0x250C,  0x2588,  0x2584,  0x258C,  0x2590,  0x2580,
        0x03B1,  0x00DF,  0x0393,  0x03C0,  0x03A3,  0x03C3,  0x00B5,  0x03C4,
        0x03A6,  0x0398,  0x03A9,  0x03B4,  0x221E,  0x03C6,  0x03B5,  0x2229,
        0x2261,  0x00B1,  0x2265,  0x2264,  0x2320,  0x2321,  0x00F7,  0x2248,
        0x00B0,  0x2219,  0x00B7,  0x221A,  0x207F,  0x00B2,  0x25A0,  0x00A0 
    };
    static const int32_t CPG_864_TBL[128] = {
        0x00B0,  0x00B7,  0x2219,  0x221A,  0x2592,  0x2500,  0x2502,  0x253C,
        0x2524,  0x252C,  0x251C,  0x2534,  0x2510,  0x250C,  0x2514,  0x2518,
        0x03B2,  0x221E,  0x03C6,  0x00B1,  0x00BD,  0x00BC,  0x2248,  0x00AB,
        0x00BB,  0xFEF7,  0xFEF8,  cpNONE,  cpNONE,  0xFEFB,  0xFEFC,  0xFE73,
        0x00A0,  0x00AD,  0xFE82,  0x00A3,  0x00A4,  0xFE84,  cpNONE,  0x20AC,
        0xFE8E,  0xFE8F,  0xFE95,  0xFE99,  0x060C,  0xFE9D,  0xFEA1,  0xFEA5,
        0x0660,  0x0661,  0x0662,  0x0663,  0x0664,  0x0665,  0x0666,  0x0667,
        0x0668,  0x0669,  0xFED1,  0x061B,  0xFEB1,  0xFEB5,  0xFEB9,  0x061F,
        0x00A2,  0xFE80,  0xFE81,  0xFE83,  0xFE85,  0xFECA,  0xFE8B,  0xFE8D,
        0xFE91,  0xFE93,  0xFE97,  0xFE9B,  0xFE9F,  0xFEA3,  0xFEA7,  0xFEA9,
        0xFEAB,  0xFEAD,  0xFEAF,  0xFEB3,  0xFEB7,  0xFEBB,  0xFEBF,  0xFEC1,
        0xFEC5,  0xFECB,  0xFECF,  0x00A6,  0x00AC,  0x00F7,  0x00D7,  0xFEC9,
        0x0640,  0xFED3,  0xFED7,  0xFEDB,  0xFEDF,  0xFEE3,  0xFEE7,  0xFEEB,
        0xFEED,  0xFEEF,  0xFEF3,  0xFEBD,  0xFECC,  0xFECE,  0xFECD,  0xFEE1,
        0xFE7D,  0x0651,  0xFEE5,  0xFEE9,  0xFEEC,  0xFEF0,  0xFEF2,  0xFED0,
        0xFED5,  0xFEF5,  0xFEF6,  0xFEDD,  0xFED9,  0xFEF1,  0x25A0,  cpNONE 
    };
    static const int32_t CPG_865_TBL[128] = {
        0x00C7,  0x00FC,  0x00E9,  0x00E2,  0x00E4,  0x00E0,  0x00E5,  0x00E7,
        0x00EA,  0x00EB,  0x00E8,  0x00EF,  0x00EE,  0x00EC,  0x00C4,  0x00C5,
        0x00C9,  0x00E6,  0x00C6,  0x00F4,  0x00F6,  0x00F2,  0x00FB,  0x00F9,
        0x00FF,  0x00D6,  0x00DC,  0x00F8,  0x00A3,  0x00D8,  0x20A7,  0x0192,
        0x00E1,  0x00ED,  0x00F3,  0x00FA,  0x00F1,  0x00D1,  0x00AA,  0x00BA,
        0x00BF,  0x2310,  0x00AC,  0x00BD,  0x00BC,  0x00A1,  0x00AB,  0x00A4,
        0x2591,  0x2592,  0x2593,  0x2502,  0x2524,  0x2561,  0x2562,  0x2556,
        0x2555,  0x2563,  0x2551,  0x2557,  0x255D,  0x255C,  0x255B,  0x2510,
        0x2514,  0x2534,  0x252C,  0x251C,  0x2500,  0x253C,  0x255E,  0x255F,
        0x255A,  0x2554,  0x2569,  0x2566,  0x2560,  0x2550,  0x256C,  0x2567,
        0x2568,  0x2564,  0x2565,  0x2559,  0x2558,  0x2552,  0x2553,  0x256B,
        0x256A,  0x2518,  0x250C,  0x2588,  0x2584,  0x258C,  0x2590,  0x2580,
        0x03B1,  0x00DF,  0x0393,  0x03C0,  0x03A3,  0x03C3,  0x00B5,  0x03C4,
        0x03A6,  0x0398,  0x03A9,  0x03B4,  0x221E,  0x03C6,  0x03B5,  0x2229,
        0x2261,  0x00B1,  0x2265,  0x2264,  0x2320,  0x2321,  0x00F7,  0x2248,
        0x00B0,  0x2219,  0x00B7,  0x221A,  0x207F,  0x00B2,  0x25A0,  0x00A0 
    };
    static const int32_t CPG_866_TBL[128] = {
        0x0410,  0x0411,  0x0412,  0x0413,  0x0414,  0x0415,  0x0416,  0x0417,
        0x0418,  0x0419,  0x041A,  0x041B,  0x041C,  0x041D,  0x041E,  0x041F,
        0x0420,  0x0421,  0x0422,  0x0423,  0x0424,  0x0425,  0x0426,  0x0427,
        0x0428,  0x0429,  0x042A,  0x042B,  0x042C,  0x042D,  0x042E,  0x042F,
        0x0430,  0x0431,  0x0432,  0x0433,  0x0434,  0x0435,  0x0436,  0x0437,
        0x0438,  0x0439,  0x043A,  0x043B,  0x043C,  0x043D,  0x043E,  0x043F,
        0x2591,  0x2592,  0x2593,  0x2502,  0x2524,  0x2561,  0x2562,  0x2556,
        0x2555,  0x2563,  0x2551,  0x2557,  0x255D,  0x255C,  0x255B,  0x2510,
        0x2514,  0x2534,  0x252C,  0x251C,  0x2500,  0x253C,  0x255E,  0x255F,
        0x255A,  0x2554,  0x2569,  0x2566,  0x2560,  0x2550,  0x256C,  0x2567,
        0x2568,  0x2564,  0x2565,  0x2559,  0x2558,  0x2552,  0x2553,  0x256B,
        0x256A,  0x2518,  0x250C,  0x2588,  0x2584,  0x258C,  0x2590,  0x2580,
        0x0440,  0x0441,  0x0442,  0x0443,  0x0444,  0x0445,  0x0446,  0x0447,
        0x0448,  0x0449,  0x044A,  0x044B,  0x044C,  0x044D,  0x044E,  0x044F,
        0x0401,  0x0451,  0x0404,  0x0454,  0x0407,  0x0457,  0x040E,  0x045E,
        0x00B0,  0x2219,  0x00B7,  0x221A,  0x2116,  0x00A4,  0x25A0,  0x00A0 
    };  
    static const int32_t CPG_874_TBL[128] = {
        cpNONE,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  
        cpNONE,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  
        0x0E48,  0x0E01,  0x0E02,  0x0E03,  0x0E04,  0x0E05,  0x0E06,  0x0E07,  
        0x0E08,  0x0E09,  0x0E0A,  0x0E0B,  0x0E0C,  0x0E0D,  0x0E0E,  0x0E0F,  
        0x0E10,  0x0E11,  0x0E12,  0x0E13,  0x0E14,  0x0E15,  0x0E16,  0x0E17,  
        0x0E18,  0x0E19,  0x0E1A,  0x0E1B,  0x0E1C,  0x0E1D,  0x0E1E,  0x0E1F,  
        0x0E20,  0x0E21,  0x0E22,  0x0E23,  0x0E24,  0x0E25,  0x0E26,  0x0E27,  
        0x0E28,  0x0E29,  0x0E2A,  0x0E2B,  0x0E2C,  0x0E2D,  0x0E2E,  0x0E2F,  
        0x0E30,  0x0E31,  0x0E32,  0x0E33,  0x0E34,  0x0E35,  0x0E36,  0x0E37,  
        0x0E38,  0x0E39,  0x0E3A,  0x0E49,  0x0E4A,  0x0E4B,  0x0E4C,  0x0E3F,  
        0x0E40,  0x0E41,  0x0E42,  0x0E43,  0x0E44,  0x0E45,  0x0E46,  0x0E47,  
        0x0E48,  0x0E49,  0x0E4A,  0x0E4B,  0x0E4C,  0x0E4D,  0x0E4E,  0x0E4F,  
        0x0E50,  0x0E51,  0x0E52,  0x0E53,  0x0E54,  0x0E55,  0x0E56,  0x0E57,  
        0x0E58,  0x0E59,  0x0E5A,  0x0E5B,  0x00A2,  0x00AC,  0x00A6,  0x00A0
    };
    static const int32_t CPG_1250_TBL[128] = {
        0x20AC,  cpNONE,  0x201A,  cpNONE,  0x201E,  0x2026,  0x2020,  0x2021,
        cpNONE,  0x2030,  0x0160,  0x2039,  0x015A,  0x0164,  0x017D,  0x0179,
        cpNONE,  0x2018,  0x2019,  0x201C,  0x201D,  0x2022,  0x2013,  0x2014,
        cpNONE,  0x2122,  0x0161,  0x203A,  0x015B,  0x0165,  0x017E,  0x017A,
           160,  0x02C7,  0x02D8,  0x0141,     164,  0x0104,     166,     167,
           168,     169,  0x015E,     171,     172,     173,     174,  0x017B,
           176,     177,  0x02DB,  0x0142,     180,     181,     182,     183,
           184,  0x0105,  0x015F,     187,  0x013D,  0x02DD,  0x013E,  0x017C,
        0x0154,     193,     194,  0x0102,     196,  0x0139,  0x0106,     199,
        0x010C,     201,  0x0118,     203,  0x011A,     205,     206,  0x010E,
        0x0110,  0x0143,  0x0147,     211,     212,  0x0150,     214,     215,
        0x0158,  0x016E,     218,  0x0170,     220,     221,  0x0162,     223,
        0x0155,     225,     226,  0x0103,     228,  0x013A,  0x0107,     231,
        0x010D,     233,  0x0119,     235,  0x011B,     237,     238,  0x010F,
        0x0111,  0x0144,  0x0148,     243,     244,  0x0151,     246,     247,
        0x0159,  0x016F,     250,  0x0171,     252,     253,  0x0163,  0x02D9 
    };
    static const int32_t CPG_1251_TBL[128] = {
        0x0402,  0x0403,  0x201A,  0x0453,  0x201E,  0x2026,  0x2020,  0x2021,
        0x20AC,  0x2030,  0x0409,  0x2039,  0x040A,  0x040C,  0x040B,  0x040F,
        0x0452,  0x2018,  0x2019,  0x201C,  0x201D,  0x2022,  0x2013,  0x2014,
           152,  0x2122,  0x0459,  0x203A,  0x045A,  0x045C,  0x045B,  0x045F,
           160,  0x040E,  0x045E,  0x0408,     164,  0x0490,     166,     167,
        0x0401,     169,  0x0404,     171,     172,     173,     174,  0x0407,
           176,     177,  0x0406,  0x0456,  0x0491,     181,     182,     183,
        0x0451,  0x2116,  0x0454,     187,  0x0458,  0x0405,  0x0455,  0x0457,
        0x0410,  0x0411,  0x0412,  0x0413,  0x0414,  0x0415,  0x0416,  0x0417,
        0x0418,  0x0419,  0x041A,  0x041B,  0x041C,  0x041D,  0x041E,  0x041F,
        0x0420,  0x0421,  0x0422,  0x0423,  0x0424,  0x0425,  0x0426,  0x0427,
        0x0428,  0x0429,  0x042A,  0x042B,  0x042C,  0x042D,  0x042E,  0x042F,
        0x0430,  0x0431,  0x0432,  0x0433,  0x0434,  0x0435,  0x0436,  0x0437,
        0x0438,  0x0439,  0x043A,  0x043B,  0x043C,  0x043D,  0x043E,  0x043F,
        0x0440,  0x0441,  0x0442,  0x0443,  0x0444,  0x0445,  0x0446,  0x0447,
        0x0448,  0x0449,  0x044A,  0x044B,  0x044C,  0x044D,  0x044E,  0x044F 
    };
    static const int32_t CPG_1252_TBL[128] = {
        0x20AC,     129,  0x201A,  0x0192,  0x201E,  0x2026,  0x2020,  0x2021,
        0x02C6,  0x2030,  0x0160,  0x2039,  0x0152,     141,  0x017D,     143,
           144,  0x2018,  0x2019,  0x201C,  0x201D,  0x2022,  0x2013,  0x2014,
        0x02DC,  0x2122,  0x0161,  0x203A,  0x0153,     157,  0x017E,  0x0178,
           160,     161,     162,     163,     164,     165,     166,     167,
           168,     169,     170,     171,     172,     173,     174,     175,
           176,     177,     178,     179,     180,     181,     182,     183,
           184,     185,     186,     187,     188,     189,     190,     191,
           192,     193,     194,     195,     196,     197,     198,     199,
           200,     201,     202,     203,     204,     205,     206,     207,
           208,     209,     210,     211,     212,     213,     214,     215,
           216,     217,     218,     219,     220,     221,     222,     223,
           224,     225,     226,     227,     228,     229,     230,     231,
           232,     233,     234,     235,     236,     237,     238,     239,
           240,     241,     242,     243,     244,     245,     246,     247,
           248,     249,     250,     251,     252,     253,     254,     255 
    };
    static const int32_t CPG_1253_TBL[128] = {
        0x20AC,  cpNONE,  0x201A,  0x0192,  0x201E,  0x2026,  0x2020,  0x2021,
        cpNONE,  0x2030,  cpNONE,  0x2039,  cpNONE,  cpNONE,  cpNONE,  cpNONE,
        cpNONE,  0x2018,  0x2019,  0x201C,  0x201D,  0x2022,  0x2013,  0x2014,
        cpNONE,  0x2122,  cpNONE,  0x203A,  cpNONE,  cpNONE,  cpNONE,  cpNONE,
        0x00A0,  0x0385,  0x0386,  0x00A3,  0x00A4,  0x00A5,  0x00A6,  0x00A7,
        0x00A8,  0x00A9,  cpNONE,  0x00AB,  0x00AC,  0x00AD,  0x00AE,  0x2015,
        0x00B0,  0x00B1,  0x00B2,  0x00B3,  0x0384,  0x00B5,  0x00B6,  0x00B7,
        0x0388,  0x0389,  0x038A,  0x00BB,  0x038C,  0x00BD,  0x038E,  0x038F,
        0x0390,  0x0391,  0x0392,  0x0393,  0x0394,  0x0395,  0x0396,  0x0397,
        0x0398,  0x0399,  0x039A,  0x039B,  0x039C,  0x039D,  0x039E,  0x039F,
        0x03A0,  0x03A1,  cpNONE,  0x03A3,  0x03A4,  0x03A5,  0x03A6,  0x03A7,
        0x03A8,  0x03A9,  0x03AA,  0x03AB,  0x03AC,  0x03AD,  0x03AE,  0x03AF,
        0x03B0,  0x03B1,  0x03B2,  0x03B3,  0x03B4,  0x03B5,  0x03B6,  0x03B7,
        0x03B8,  0x03B9,  0x03BA,  0x03BB,  0x03BC,  0x03BD,  0x03BE,  0x03BF,
        0x03C0,  0x03C1,  0x03C2,  0x03C3,  0x03C4,  0x03C5,  0x03C6,  0x03C7,
        0x03C8,  0x03C9,  0x03CA,  0x03CB,  0x03CC,  0x03CD,  0x03CE,  cpNONE
    };
    static const int32_t CPG_1254_TBL[128] = {
        0x20AC,  cpNONE,  0x201A,  0x0192,  0x201E,  0x2026,  0x2020,  0x2021,  
        0x02C6,  0x2030,  0x0160,  0x2039,  0x0152,  cpNONE,  cpNONE,  cpNONE,  
        cpNONE,  0x2018,  0x2019,  0x201C,  0x201D,  0x2022,  0x2013,  0x2014,  
        0x02DC,  0x2122,  0x0161,  0x203A,  0x0153,  cpNONE,  cpNONE,  0x0178,  
           160,     161,     162,     163,     164,     165,     166,     167,
           168,     169,     170,     171,     172,     173,     174,     175,
           176,     177,     178,     179,     180,     181,     182,     183,
           184,     185,     186,     187,     188,     189,     190,     191,
           192,     193,     194,     195,     196,     197,     198,     199,
           200,     201,     202,     203,     204,     205,     206,     207,
        0x011E,     209,     210,     211,     212,     213,     214,     215,
           216,     217,     218,     219,     220,  0x0130,  0x015E,     223,  
           224,     225,     226,     227,     228,     229,     230,     231,
           232,     233,     234,     235,     236,     237,     238,     239,
        0x011F,     241,     242,     243,     244,     245,     246,     247,
           248,     249,     250,     251,     252,  0x0131,  0x015F,     255
    };
    static const int32_t CPG_1255_TBL[128] = {
        0x20AC,  cpNONE,  0x201A,  0x0192,  0x201E,  0x2026,  0x2020,  0x2021,  
        0x02C6,  0x2030,  cpNONE,  0x2039,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  
        cpNONE,  0x2018,  0x2019,  0x201C,  0x201D,  0x2022,  0x2013,  0x2014,  
        0x02DC,  0x2122,  cpNONE,  0x203A,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  
           160,     161,     162,     163,  0x20AA,     165,     166,     167,
           168,     169,  0x00D7,     171,     172,     173,     174,     175,
           176,     177,     178,     179,     180,     181,     182,     183,
           184,     185,  0x00F7,     187,     188,     189,     190,     191,
        0x05B0,  0x05B1,  0x05B2,  0x05B3,  0x05B4,  0x05B5,  0x05B6,  0x05B7,  
        0x05B8,  0x05B9,  0x05BA,  0x05BB,  0x05BC,  0x05BD,  0x05BE,  0x05BF,  
        0x05C0,  0x05C1,  0x05C2,  0x05C3,  0x05F0,  0x05F1,  0x05F2,  0x05F3,  
        0x05F4,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  cpNONE,  
        0x05D0,  0x05D1,  0x05D2,  0x05D3,  0x05D4,  0x05D5,  0x05D6,  0x05D7,  
        0x05D8,  0x05D9,  0x05DA,  0x05DB,  0x05DC,  0x05DD,  0x05DE,  0x05DF,  
        0x05E0,  0x05E1,  0x05E2,  0x05E3,  0x05E4,  0x05E5,  0x05E6,  0x05E7,  
        0x05E8,  0x05E9,  0x05EA,  cpNONE,  cpNONE,  0x200E,  0x200F,  cpNONE
    };
    static const int32_t CPG_1256_TBL[128] = {
        0x20AC,  0x067E,  0x201A,  0x0192,  0x201E,  0x2026,  0x2020,  0x2021,  
        0x02C6,  0x2030,  0x0679,  0x2039,  0x0152,  0x0686,  0x0698,  0x0688,  
        0x06AF,  0x2018,  0x2019,  0x201C,  0x201D,  0x2022,  0x2013,  0x2014,  
        0x06A9,  0x2122,  0x0691,  0x203A,  0x0153,  0x200C,  0x200D,  0x06BA,  
           160,  0x060C,     162,     163,     164,     165,     166,     167,  
           168,     169,  0x06BE,     171,     172,     173,     174,     175,  
           176,     177,     178,     179,     180,     181,     182,     183,  
           184,     185,  0x061B,     186,     187,     188,     189,  0x061F,  
        0x06C1,  0x0621,  0x0622,  0x0623,  0x0624,  0x0625,  0x0626,  0x0627,  
        0x0628,  0x0629,  0x062A,  0x062B,  0x062C,  0x062D,  0x062E,  0x062F,  
        0x0630,  0x0631,  0x0632,  0x0633,  0x0634,  0x0635,  0x0636,     215,  
        0x0637,  0x0638,  0x0639,  0x063A,  0x0640,  0x0641,  0x0642,  0x0643,  
           224,  0x0644,     226,  0x0645,  0x0646,  0x0647,  0x0648,     231,  
           232,     233,     234,     235,  0x0649,  0x064A,     238,     239,  
        0x064B,  0x064C,  0x064D,  0x064E,     244,  0x064F,  0x0650,     247,  
        0x0651,     249,  0x0652,     251,     252,  0x200E,  0x200F,  0x06D2
    };
    static const int32_t CPG_1257_TBL[128] = {
        0x20AC,  cpNONE,  0x201A,  cpNONE,  0x201E,  0x2026,  0x2020,  0x2021,  
        cpNONE,  0x2030,  cpNONE,  0x2039,  cpNONE,  0x00A8,  0x02C7,  0x00B8,  
        cpNONE,  0x2018,  0x2019,  0x201C,  0x201D,  0x2022,  0x2013,  0x2014,  
        cpNONE,  0x2122,  cpNONE,  0x203A,  cpNONE,  0x00AF,  0x02DB,  cpNONE,  
           160,  cpNONE,     162,     163,     164,  cpNONE,     166,     167,  
        0x00D8,     169,  0x0156,     171,     172,     173,     174,  0x00C6,  
           176,     177,     178,     179,     180,     181,     182,     183,
        0x00F8,     185,  0x0157,     187,     188,     189,     190,  0x00E6,
        0x0104,  0x012E,  0x0100,  0x0106,     196,     197,  0x0118,  0x0112,  
        0x010C,     201,  0x0179,  0x0116,  0x0122,  0x0136,  0x012A,  0x013B,  
        0x0160,  0x0143,  0x0145,     211,  0x014C,     213,     214,     215,  
        0x0172,  0x0141,  0x015A,  0x016A,     220,  0x017B,  0x017D,     223,  
        0x0105,  0x012F,  0x0101,  0x0107,     228,     229,  0x0119,  0x0113,  
        0x010D,     233,  0x017A,  0x0117,  0x0123,  0x0137,  0x012B,  0x013C,  
        0x0161,  0x0144,  0x0146,     243,  0x014D,     245,     246,     247,
        0x0173,  0x0142,  0x015B,  0x016B,     252,  0x017C,  0x017E,  0x02D9
    };
    static const int32_t CPG_1258_TBL[128] = {
        0x20AC,  cpNONE,  0x201A,  0x0192,  0x201E,  0x2026,  0x2020,  0x2021,
        0x02C6,  0x2030,  cpNONE,  0x2039,  0x0152,  cpNONE,  cpNONE,  cpNONE,
        cpNONE,  0x2018,  0x2019,  0x201C,  0x201D,  0x2022,  0x2013,  0x2014,
        0x02DC,  0x2122,  cpNONE,  0x203A,  0x0153,  cpNONE,  cpNONE,  0x0178,
           160,     161,     162,     163,     164,     165,     166,     167,
           168,     169,     170,     171,     172,     173,     174,     175,
           176,     177,     178,     179,     180,     181,     182,     183,
           184,     185,     186,     187,     188,     189,     190,     191,
           192,     193,     194,  0x0102,     196,     197,     198,     199,
           200,     201,     202,     203,  0x0300,     205,     206,     207,
        0x0110,     209,  0x0309,     211,     212,  0x01A0,     214,     215,
           216,     217,     218,     219,     220,  0x01AF,  0x0303,     223,
           224,     225,     226,  0x0103,     228,     229,     230,     231,
           232,     233,     234,     235,  0x0301,     237,     238,     239,
        0x0111,     241,  0x0323,     243,     244,  0x01A1,     246,     247,
           248,     249,     250,     251,     252,  0x01B0,  0x20AB,     255 
    };    
    static const int32_t CPG_10000_TBL[128] = {
        0x00C4,  0x00C5,  0x00C7,  0x00C9,  0x00D1,  0x00D6,  0x00DC,  0x00E1,
        0x00E0,  0x00E2,  0x00E4,  0x00E3,  0x00E5,  0x00E7,  0x00E9,  0x00E8,
        0x00EA,  0x00EB,  0x00ED,  0x00EC,  0x00EE,  0x00EF,  0x00F1,  0x00F3,
        0x00F2,  0x00F4,  0x00F6,  0x00F5,  0x00FA,  0x00F9,  0x00FB,  0x00FC,
        0x2020,  0x00B0,     162,     163,  0x00A7,  0x2022,  0x00B6,  0x00DF,
        0x00AE,     169,  0x2122,  0x00B4,  0x00A8,  0x2260,  0x00C6,  0x00D8,
        0x221E,     177,  0x2264,  0x2265,  0x00A5,     181,  0x2202,  0x2211,
        0x220F,  0x03C0,  0x222B,  0x00AA,  0x00BA,  0x03A9,  0x00E6,  0x00F8,
        0x00BF,  0x00A1,  0x00AC,  0x221A,  0x0192,  0x2248,  0x2206,  0x00AB,
        0x00BB,  0x2026,  0x00A0,  0x00C0,  0x00C3,  0x00D5,  0x0152,  0x0153,
        0x2013,  0x2014,  0x201C,  0x201D,  0x2018,  0x2019,  0x00F7,  0x25CA,
        0x00FF,  0x0178,  0x2044,  0x20AC,  0x2039,  0x203A,  0xFB01,  0xFB02,
        0x2021,  0x00B7,  0x201A,  0x201E,  0x2030,  0x00C2,  0x00CA,  0x00C1,
        0x00CB,  0x00C8,  0x00CD,  0x00CE,  0x00CF,  0x00CC,  0x00D3,  0x00D4,
        0xF8FF,  0x00D2,  0x00DA,  0x00DB,  0x00D9,  0x0131,  0x02C6,  0x02DC,
        0x00AF,  0x02D8,  0x02D9,  0x02DA,  0x00B8,  0x02DD,  0x02DB,  0x02C7 
    };
    static const int32_t CPG_10004_TBL[128] = {
        0x00C4,  0x00A0,  0x00C7,  0x00C9,  0x00D1,  0x00D6,  0x00DC,  0x00E1,
        0x00E0,  0x00E2,  0x00E4,  0x06BA,  0x00AB,  0x00E7,  0x00E9,  0x00E8,
        0x00EA,  0x00EB,  0x00ED,  0x2026,  0x00EE,  0x00EF,  0x00F1,  0x00F3,
        0x00BB,  0x00F4,  0x00F6,  0x00F7,  0x00FA,  0x00F9,  0x00FB,  0x00FC,
        0x0020,  0x0021,  0x0022,  0x0023,  0x0024,  0x066A,  0x0026,  0x0027,
        0x0028,  0x0029,  0x002A,  0x002B,  0x060C,  0x002D,  0x002E,  0x002F,
        0x0660,  0x0661,  0x0662,  0x0663,  0x0664,  0x0665,  0x0666,  0x0667,
        0x0668,  0x0669,  0x003A,  0x061B,  0x003C,  0x003D,  0x003E,  0x061F,
        0x274A,  0x0621,  0x0622,  0x0623,  0x0624,  0x0625,  0x0626,  0x0627,
        0x0628,  0x0629,  0x062A,  0x062B,  0x062C,  0x062D,  0x062E,  0x062F,
        0x0630,  0x0631,  0x0632,  0x0633,  0x0634,  0x0635,  0x0636,  0x0637,
        0x0638,  0x0639,  0x063A,  0x005B,  0x005C,  0x005D,  0x005E,  0x005F,
        0x0640,  0x0641,  0x0642,  0x0643,  0x0644,  0x0645,  0x0646,  0x0647,
        0x0648,  0x0649,  0x064A,  0x064B,  0x064C,  0x064D,  0x064E,  0x064F,
        0x0650,  0x0651,  0x0652,  0x067E,  0x0679,  0x0686,  0x06D5,  0x06A4,
        0x06AF,  0x0688,  0x0691,  0x007B,  0x007C,  0x007D,  0x0698,  0x06D2 
    };
    static const int32_t CPG_10005_TBL[128] = {
        0x00C4,  0xFB1F,  0x00C7,  0x00C9,  0x00D1,  0x00D6,  0x00DC,  0x00E1,
        0x00E0,  0x00E2,  0x00E4,  0x00E3,  0x00E5,  0x00E7,  0x00E9,  0x00E8,
        0x00EA,  0x00EB,  0x00ED,  0x00EC,  0x00EE,  0x00EF,  0x00F1,  0x00F3,
        0x00F2,  0x00F4,  0x00F6,  0x00F5,  0x00FA,  0x00F9,  0x00FB,  0x00FC,
        0x0020,  0x0021,  0x0022,  0x0023,  0x0024,  0x0025,  0x20AA,  0x0027,
        0x0029,  0x0028,  0x002A,  0x002B,  0x002C,  0x002D,  0x002E,  0x002F,
        0x0030,  0x0031,  0x0032,  0x0033,  0x0034,  0x0035,  0x0036,  0x0037,
        0x0038,  0x0039,  0x003A,  0x003B,  0x003C,  0x003D,  0x003E,  0x003F,
        0x05DC,  0x201E,  0xF89B,  0xF89C,  0xF89D,  0xF89E,  0x05BC,  0xFB4B,
        0xFB35,  0x2026,  0x00A0,  0x05B8,  0x05B7,  0x05B5,  0x05B6,  0x05B4,
        0x2013,  0x2014,  0x201C,  0x201D,  0x2018,  0x2019,  0xFB2A,  0xFB2B,
        0x05BF,  0x05B0,  0x05B2,  0x05B1,  0x05BB,  0x05B9,  0x05C7,  0x05B3,
        0x05D0,  0x05D1,  0x05D2,  0x05D3,  0x05D4,  0x05D5,  0x05D6,  0x05D7,
        0x05D8,  0x05D9,  0x05DA,  0x05DB,  0x05DC,  0x05DD,  0x05DE,  0x05DF,
        0x05E0,  0x05E1,  0x05E2,  0x05E3,  0x05E4,  0x05E5,  0x05E6,  0x05E7,
        0x05E8,  0x05E9,  0x05EA,  0x007D,  0x005D,  0x007B,  0x005B,  0x007C 
    };
    static const int32_t CPG_10006_TBL[128] = {
        0x00C4,  0x00B9,  0x00B2,  0x00C9,  0x00B3,  0x00D6,  0x00DC,  0x0385,
        0x00E0,  0x00E2,  0x00E4,  0x0384,  0x00A8,  0x00E7,  0x00E9,  0x00E8,
        0x00EA,  0x00EB,  0x00A3,  0x2122,  0x00EE,  0x00EF,  0x2022,  0x00BD,
        0x2030,  0x00F4,  0x00F6,  0x00A6,  0x20AC,  0x00F9,  0x00FB,  0x00FC,
        0x2020,  0x0393,  0x0394,  0x0398,  0x039B,  0x039E,  0x03A0,  0x00DF,
        0x00AE,     169,  0x03A3,  0x03AA,  0x00A7,  0x2260,  0x00B0,  0x00B7,
        0x0391,     177,  0x2264,  0x2265,  0x00A5,  0x0392,  0x0395,  0x0396,
        0x0397,  0x0399,  0x039A,  0x039C,  0x03A6,  0x03AB,  0x03A8,  0x03A9,
        0x03AC,  0x039D,  0x00AC,  0x039F,  0x03A1,  0x2248,  0x03A4,  0x00AB,
        0x00BB,  0x2026,  0x00A0,  0x03A5,  0x03A7,  0x0386,  0x0388,  0x0153,
        0x2013,  0x2015,  0x201C,  0x201D,  0x2018,  0x2019,  0x00F7,  0x0389,
        0x038A,  0x038C,  0x038E,  0x03AD,  0x03AE,  0x03AF,  0x03CC,  0x038F,
        0x03CD,  0x03B1,  0x03B2,  0x03C8,  0x03B4,  0x03B5,  0x03C6,  0x03B3,
        0x03B7,  0x03B9,  0x03BE,  0x03BA,  0x03BB,  0x03BC,  0x03BD,  0x03BF,
        0x03C0,  0x03CE,  0x03C1,  0x03C3,  0x03C4,  0x03B8,  0x03C9,  0x03C2,
        0x03C7,  0x03C5,  0x03B6,  0x03CA,  0x03CB,  0x0390,  0x03B0,  0x00AD 
    };
    static const int32_t CPG_10007_TBL[128] = {
        0x0410,  0x0411,  0x0412,  0x0413,  0x0414,  0x0415,  0x0416,  0x0417,
        0x0418,  0x0419,  0x041A,  0x041B,  0x041C,  0x041D,  0x041E,  0x041F,
        0x0420,  0x0421,  0x0422,  0x0423,  0x0424,  0x0425,  0x0426,  0x0427,
        0x0428,  0x0429,  0x042A,  0x042B,  0x042C,  0x042D,  0x042E,  0x042F,
        0x2020,  0x00B0,  0x0490,     163,  0x00A7,  0x2022,  0x00B6,  0x0406,
        0x00AE,     169,  0x2122,  0x0402,  0x0452,  0x2260,  0x0403,  0x0453,
        0x221E,     177,  0x2264,  0x2265,  0x0456,     181,  0x0491,  0x0408,
        0x0404,  0x0454,  0x0407,  0x0457,  0x0409,  0x0459,  0x040A,  0x045A,
        0x0458,  0x0405,  0x00AC,  0x221A,  0x0192,  0x2248,  0x2206,  0x00AB,
        0x00BB,  0x2026,  0x00A0,  0x040B,  0x045B,  0x040C,  0x045C,  0x0455,
        0x2013,  0x2014,  0x201C,  0x201D,  0x2018,  0x2019,  0x00F7,  0x201E,
        0x040E,  0x045E,  0x040F,  0x045F,  0x2116,  0x0401,  0x0451,  0x044F,
        0x0430,  0x0431,  0x0432,  0x0433,  0x0434,  0x0435,  0x0436,  0x0437,
        0x0438,  0x0439,  0x043A,  0x043B,  0x043C,  0x043D,  0x043E,  0x043F,
        0x0440,  0x0441,  0x0442,  0x0443,  0x0444,  0x0445,  0x0446,  0x0447,
        0x0448,  0x0449,  0x044A,  0x044B,  0x044C,  0x044D,  0x044E,  0x20AC 
    };
    static const int32_t CPG_10029_TBL[128] = {
        0x00C4,  0x0100,  0x0101,  0x00C9,  0x0104,  0x00D6,  0x00DC,  0x00E1,
        0x0105,  0x010C,  0x00E4,  0x010D,  0x0106,  0x0107,  0x00E9,  0x0179,
        0x017A,  0x010E,  0x00ED,  0x010F,  0x0112,  0x0113,  0x0116,  0x00F3,
        0x0117,  0x00F4,  0x00F6,  0x00F5,  0x00FA,  0x011A,  0x011B,  0x00FC,
        0x2020,  0x00B0,  0x0118,     163,  0x00A7,  0x2022,  0x00B6,  0x00DF,
        0x00AE,     169,  0x2122,  0x0119,  0x00A8,  0x2260,  0x0123,  0x012E,
        0x012F,  0x012A,  0x2264,  0x2265,  0x012B,  0x0136,  0x2202,  0x2211,
        0x0142,  0x013B,  0x013C,  0x013D,  0x013E,  0x0139,  0x013A,  0x0145,
        0x0146,  0x0143,  0x00AC,  0x221A,  0x0144,  0x0147,  0x2206,  0x00AB,
        0x00BB,  0x2026,  0x00A0,  0x0148,  0x0150,  0x00D5,  0x0151,  0x014C,
        0x2013,  0x2014,  0x201C,  0x201D,  0x2018,  0x2019,  0x00F7,  0x25CA,
        0x014D,  0x0154,  0x0155,  0x0158,  0x2039,  0x203A,  0x0159,  0x0156,
        0x0157,  0x0160,  0x201A,  0x201E,  0x0161,  0x015A,  0x015B,  0x00C1,
        0x0164,  0x0165,  0x00CD,  0x017D,  0x017E,  0x016A,  0x00D3,  0x00D4,
        0x016B,  0x016E,  0x00DA,  0x016F,  0x0170,  0x0171,  0x0172,  0x0173,
        0x00DD,  0x00FD,  0x0137,  0x017B,  0x0141,  0x017C,  0x0122,  0x02C7 
    };
    static const int32_t CPG_10081_TBL[128] = {
        0x00C4,  0x00C5,  0x00C7,  0x00C9,  0x00D1,  0x00D6,  0x00DC,  0x00E1,
        0x00E0,  0x00E2,  0x00E4,  0x00E3,  0x00E5,  0x00E7,  0x00E9,  0x00E8,
        0x00EA,  0x00EB,  0x00ED,  0x00EC,  0x00EE,  0x00EF,  0x00F1,  0x00F3,
        0x00F2,  0x00F4,  0x00F6,  0x00F5,  0x00FA,  0x00F9,  0x00FB,  0x00FC,
        0x2020,  0x00B0,     162,     163,  0x00A7,  0x2022,  0x00B6,  0x00DF,
        0x00AE,     169,  0x2122,  0x00B4,  0x00A8,  0x2260,  0x00C6,  0x00D8,
        0x221E,     177,  0x2264,  0x2265,  0x00A5,     181,  0x2202,  0x2211,
        0x220F,  0x03C0,  0x222B,  0x00AA,  0x00BA,  0x03A9,  0x00E6,  0x00F8,
        0x00BF,  0x00A1,  0x00AC,  0x221A,  0x0192,  0x2248,  0x2206,  0x00AB,
        0x00BB,  0x2026,  0x00A0,  0x00C0,  0x00C3,  0x00D5,  0x0152,  0x0153,
        0x2013,  0x2014,  0x201C,  0x201D,  0x2018,  0x2019,  0x00F7,  0x25CA,
        0x00FF,  0x0178,  0x011E,  0x011F,  0x0130,  0x0131,  0x015E,  0x015F,
        0x2021,  0x00B7,  0x201A,  0x201E,  0x2030,  0x00C2,  0x00CA,  0x00C1,
        0x00CB,  0x00C8,  0x00CD,  0x00CE,  0x00CF,  0x00CC,  0x00D3,  0x00D4,
        0xF8FF,  0x00D2,  0x00DA,  0x00DB,  0x00D9,  cpNONE,  0x02C6,  0x02DC,
        0x00AF,  0x02D8,  0x02D9,  0x02DA,  0x00B8,  0x02DD,  0x02DB,  0x02C7 
    };

    unsigned char c = cpt;
    int32_t r = 0;

    switch(cpg) {
        case PC:
        case CPG_437:    r = (c<128) ? c : CPG_437_TBL[c-128];     break;
        case CPG_708:    r = (c<128) ? c : CPG_708_TBL[c-128];     break;
        case CPG_709:    r = cpUNSUPPORTED;                        break;
        case CPG_710:    r = cpUNSUPPORTED;                        break;
        case CPG_711:    r = cpUNSUPPORTED;                        break;
        case CPG_720:    r = (c<128) ? c : CPG_720_TBL[c-128];     break;
        case CPG_819:    r = (c<128) ? c : CPG_819_TBL[c-128];     break;
        case PCA:        r = (c<128) ? c : CPG_850_TBL[c-128];     break;
        case CPG_850:    r = (c<128) ? c : CPG_850_TBL[c-128];     break;
        case CPG_852:    r = (c<128) ? c : CPG_852_TBL[c-128];     break;
        case CPG_860:    r = (c<128) ? c : CPG_860_TBL[c-128];     break;
        case CPG_862:    r = (c<128) ? c : CPG_862_TBL[c-128];     break;
        case CPG_863:    r = (c<128) ? c : CPG_863_TBL[c-128];     break;
        case CPG_864:    r = (c<128) ? c : CPG_864_TBL[c-128];     break;
        case CPG_865:    r = (c<128) ? c : CPG_865_TBL[c-128];     break;
        case CPG_866:    r = (c<128) ? c : CPG_866_TBL[c-128];     break;
        case CPG_874:    r = (c<128) ? c : CPG_874_TBL[c-128];     break;
        case CPG_932:    r = cpUNSUPPORTED;                        break;
        case CPG_936:    r = cpUNSUPPORTED;                        break;
        case CPG_949:    r = cpUNSUPPORTED;                        break;
        case CPG_950:    r = cpUNSUPPORTED;                        break;
        case CPG_1250:   r = (c<128) ? c : CPG_1250_TBL[c-128];    break;
        case CPG_1251:   r = (c<128) ? c : CPG_1251_TBL[c-128];    break;
        case ANSI:       r = (c<128) ? c : CPG_1252_TBL[c-128];    break;
        case CPG_1252:   r = (c<128) ? c : CPG_1252_TBL[c-128];    break;
        case CPG_1253:   r = (c<128) ? c : CPG_1253_TBL[c-128];    break;
        case CPG_1254:   r = (c<128) ? c : CPG_1254_TBL[c-128];    break;
        case CPG_1255:   r = (c<128) ? c : CPG_1255_TBL[c-128];    break;
        case CPG_1256:   r = (c<128) ? c : CPG_1256_TBL[c-128];    break;
        case CPG_1257:   r = (c<128) ? c : CPG_1257_TBL[c-128];    break;
        case CPG_1258:   r = (c<128) ? c : CPG_1258_TBL[c-128];    break;
        case CPG_1361:   r = cpUNSUPPORTED;                        break;
        case MAC:        r = (c<128) ? c : CPG_10000_TBL[c-128];   break;
        case MACROMAN:   r = (c<128) ? c : CPG_10000_TBL[c-128];   break;
        case CPG_10000:  r = (c<128) ? c : CPG_10000_TBL[c-128];   break;
        case CPG_10001:  r = cpUNSUPPORTED;                        break;
        case CPG_10004:  r = (c<128) ? c : CPG_10004_TBL[c-128];   break;
        case CPG_10005:  r = (c<128) ? c : CPG_10005_TBL[c-128];   break;
        case CPG_10006:  r = (c<128) ? c : CPG_10006_TBL[c-128];   break;
        case CPG_10007:  r = (c<128) ? c : CPG_10007_TBL[c-128];   break;
        case CPG_10029:  r = (c<128) ? c : CPG_10029_TBL[c-128];   break;
        case CPG_10081:  r = (c<128) ? c : CPG_10081_TBL[c-128];   break;
        case CPG_57002:  r = cpUNSUPPORTED;                        break;
        case CPG_57003:  r = cpUNSUPPORTED;                        break;
        case CPG_57004:  r = cpUNSUPPORTED;                        break;
        case CPG_57005:  r = cpUNSUPPORTED;                        break;
        case CPG_57006:  r = cpUNSUPPORTED;                        break;
        case CPG_57007:  r = cpUNSUPPORTED;                        break;
        case CPG_57008:  r = cpUNSUPPORTED;                        break;
        case CPG_57009:  r = cpUNSUPPORTED;                        break;
        case CPG_57010:  r = cpUNSUPPORTED;                        break;
        case CPG_57011:  r = cpUNSUPPORTED;                        break;
    }

    // Support the Mac Hebrew lamed-holam ligature
    if ((cpg == CPG_10005) && (cpt == 0xC0)) {
        *extra = 0x05B9;
    }

    else if (r == cpCALLAGAIN) {
        *extra = cpt;
    }
    else {
        *extra = -1;
    }

    return r;
}


#endif
